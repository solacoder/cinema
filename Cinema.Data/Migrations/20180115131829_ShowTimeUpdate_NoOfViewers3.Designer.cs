// <auto-generated />
using CinemaApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CinemaApp.Data.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20180115131829_ShowTimeUpdate_NoOfViewers3")]
    partial class ShowTimeUpdate_NoOfViewers3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CinemaApp.Core.Models.Actor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<long>("MovieId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("CinemaApp.Core.Models.Cinema", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CinemaOwnerId");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CinemaOwnerId");

                    b.ToTable("Cinemas");
                });

            modelBuilder.Entity("CinemaApp.Core.Models.CinemaOwner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("CinemaOwners");
                });

            modelBuilder.Entity("CinemaApp.Core.Models.CinemaScreen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CinemaId");

                    b.Property<long>("CinemaOwnerId");

                    b.Property<string>("Name");

                    b.Property<int>("NoOfSeats");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.HasIndex("CinemaOwnerId");

                    b.ToTable("CinemaScreens");
                });

            modelBuilder.Entity("CinemaApp.Core.Models.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Duration");

                    b.Property<long>("MovieCategoryId");

                    b.Property<string>("Name");

                    b.Property<long?>("ProducerId");

                    b.Property<DateTime>("ReleaseDate");

                    b.HasKey("Id");

                    b.HasIndex("MovieCategoryId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CinemaApp.Core.Models.MovieCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MovieCategories");
                });

            modelBuilder.Entity("CinemaApp.Core.Models.Producer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("CinemaApp.Core.Models.ShowTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CinemaId");

                    b.Property<long>("CinemaOwnerId");

                    b.Property<long>("CinemaScreenId");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("MovieCategoryId");

                    b.Property<long>("MovieId");

                    b.Property<int>("NoOfViewers");

                    b.Property<DateTime>("ShowDate");

                    b.Property<DateTime>("Time");

                    b.Property<string>("Week");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.HasIndex("CinemaOwnerId");

                    b.HasIndex("CinemaScreenId");

                    b.HasIndex("MovieCategoryId");

                    b.HasIndex("MovieId");

                    b.ToTable("ShowTimes");
                });

            modelBuilder.Entity("CinemaApp.Core.Models.Actor", b =>
                {
                    b.HasOne("CinemaApp.Core.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CinemaApp.Core.Models.Cinema", b =>
                {
                    b.HasOne("CinemaApp.Core.Models.CinemaOwner", "CinemaOwner")
                        .WithMany("Cinemas")
                        .HasForeignKey("CinemaOwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CinemaApp.Core.Models.CinemaScreen", b =>
                {
                    b.HasOne("CinemaApp.Core.Models.Cinema", "Cinema")
                        .WithMany("Screens")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CinemaApp.Core.Models.CinemaOwner", "CinemaOwner")
                        .WithMany()
                        .HasForeignKey("CinemaOwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CinemaApp.Core.Models.Movie", b =>
                {
                    b.HasOne("CinemaApp.Core.Models.MovieCategory", "MovieCategory")
                        .WithMany("Movies")
                        .HasForeignKey("MovieCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CinemaApp.Core.Models.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CinemaApp.Core.Models.ShowTime", b =>
                {
                    b.HasOne("CinemaApp.Core.Models.Cinema", "Cinema")
                        .WithMany()
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CinemaApp.Core.Models.CinemaOwner", "CinemaOwner")
                        .WithMany()
                        .HasForeignKey("CinemaOwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CinemaApp.Core.Models.CinemaScreen", "CinemaScreen")
                        .WithMany()
                        .HasForeignKey("CinemaScreenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CinemaApp.Core.Models.MovieCategory", "MovieCategory")
                        .WithMany()
                        .HasForeignKey("MovieCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CinemaApp.Core.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
